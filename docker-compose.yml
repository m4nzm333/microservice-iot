version: "3.3"

services:
  # ===============
  # Proxy
  # ===============
  traefik:
    image: "traefik:latest"
    container_name: traefik
    hostname: traefik
    command:
      - --api
      - --entrypoints.web.address=:80
      - --log.level=ERROR
      - --providers.docker
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./traefik/acme.json:/acme.json"
    environment:
      - TZ=Asia/Makassar
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik.entrypoints=web
      - traefik.http.routers.traefik.rule=Host(`traefik.myiot.com`)
      - traefik.http.routers.traefik.service=api@internal
    networks:
      - services-proxy
      - services-db

  # ===============
  # Container Manager
  # ===============
  portainer:
    image: portainer/portainer-ce:2.14.2
    container_name: portainer
    command: -H unix:///var/run/docker.sock
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./portainer/data:/data
    labels:
      - traefik.enable=true
      - traefik.http.routers.portainer.entrypoints=web
      - traefik.http.routers.portainer.rule=Host(`portainer.myiot.com`)
      - traefik.http.routers.portainer.service=portainer
      - traefik.http.services.portainer.loadbalancer.server.port=9000
    environment:
      - TZ=Asia/Makassar
    networks:
      - services-proxy

  # ===============
  # Database
  # ===============
  mongodb:
    image: mongo:4.4.6
    container_name: mongodb
    hostname: mongodb
    restart: always
    ports:
      - 27017:27017
    volumes:
      - ./mongodb:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: 123456
      TZ: Asia/Makassar
    networks:
      - services-db

  # ===============
  # DB Manager
  # ===============
  mongo-express:
    #port:8081
    image: mongo-express
    container_name: mongo-express
    hostname: mongo-express
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: 123456
      ME_CONFIG_MONGODB_URL: mongodb://root:123456@mongodb:27017/
      TZ: Asia/Makassar
    networks:
      - services-db
      - services-proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.mongo-express.entrypoints=web
      - traefik.http.routers.mongo-express.rule=Host(`db.myiot.com`)
      - traefik.http.routers.mongo-express.service=mongo-express
      - traefik.http.services.mongo-express.loadbalancer.server.port=8081
    depends_on:
      - mongodb

  # ===============
  # Services
  # ===============
  web-landing:
    image: python:3.10.6-slim-bullseye
    container_name: web-landing
    hostname: web-landing
    volumes:
      - ./services/landing:/usr/src/app
    environment:
      TZ: Asia/Makassar
    networks:
      - services-db
      - services-proxy
    working_dir: /usr/src/app
    command: /bin/bash -c "pip3 install -r requirements.txt && python app.py"
    labels:
      - traefik.enable=true
      - traefik.http.routers.web-landing.entrypoints=web
      - traefik.http.routers.web-landing.rule=Host(`myiot.com`)
      - traefik.http.routers.web-landing.service=web-landing
      - traefik.http.services.web-landing.loadbalancer.server.port=8080

  api-sensor:
    image: python:3.10.6-slim-bullseye
    container_name: api-sensor
    hostname: api-sensor
    volumes:
      - ./services/sensor:/usr/src/app
    environment:
      DB_HOSTNAME: mongodb
      DB_PORT: 27017
      DB_USERNAME: root
      DB_PASSWORD: 123456
      DB_NAME: myiot
      TZ: Asia/Makassar
    networks:
      - services-db
      - services-proxy
    working_dir: /usr/src/app
    command: /bin/bash -c "pip3 install -r requirements.txt && python app.py"
    labels:
      - traefik.enable=true
      - traefik.http.middlewares.web-sensor.stripprefix.forceslash=false
      - traefik.http.middlewares.web-sensor.stripprefix.prefixes=/sensor/,/sensor
      - traefik.http.routers.web-sensor.entrypoints=web
      - traefik.http.routers.web-sensor.middlewares=web-sensor
      - traefik.http.routers.web-sensor.rule=(Host(`api.myiot.com`) && (PathPrefix(`/sensor/`) || PathPrefix(`/sensor`)))
      - traefik.http.routers.web-sensor.service=web-sensor
      - traefik.http.services.web-sensor.loadbalancer.server.port=8080

  api-control:
    image: python:3.10.6-slim-bullseye
    container_name: api-control
    hostname: api-control
    volumes:
      - ./services/control:/usr/src/app
    environment:
      DB_HOSTNAME: mongodb
      DB_PORT: 27017
      DB_USERNAME: root
      DB_PASSWORD: 123456
      DB_NAME: myiot
      TZ: Asia/Makassar
    networks:
      - services-db
      - services-proxy
    working_dir: /usr/src/app
    command: /bin/bash -c "pip3 install -r requirements.txt && python app.py"
    labels:
      - traefik.enable=true
      - traefik.http.middlewares.api-control.stripprefix.forceslash=false
      - traefik.http.middlewares.api-control.stripprefix.prefixes=/control/,/control
      - traefik.http.routers.api-control.entrypoints=web
      - traefik.http.routers.api-control.middlewares=api-control
      - traefik.http.routers.api-control.rule=(Host(`api.myiot.com`) && (PathPrefix(`/control/`) || PathPrefix(`/control`)))
      - traefik.http.routers.api-control.service=api-control
      - traefik.http.services.api-control.loadbalancer.server.port=8080

  api-scheduler:
    image: python:3.10.6-slim-bullseye
    container_name: api-scheduler
    hostname: api-scheduler
    volumes:
      - ./services/api-scheduler:/usr/src/app
    environment:
      DB_HOSTNAME: mongodb
      DB_PORT: 27017
      DB_USERNAME: root
      DB_PASSWORD: 123456
      DB_NAME: myiot
      TZ: Asia/Makassar
    networks:
      - services-db
      - services-proxy
    working_dir: /usr/src/app
    command: /bin/bash -c "pip3 install -r requirements.txt && python app.py"
    labels:
      - traefik.enable=true
      - traefik.http.middlewares.api-scheduler.stripprefix.forceslash=false
      - traefik.http.middlewares.api-scheduler.stripprefix.prefixes=/scheduler/,/scheduler
      - traefik.http.routers.api-scheduler.entrypoints=web
      - traefik.http.routers.api-scheduler.middlewares=api-scheduler
      - traefik.http.routers.api-scheduler.rule=(Host(`api.myiot.com`) && (PathPrefix(`/scheduler/`) || PathPrefix(`/scheduler`)))
      - traefik.http.routers.api-scheduler.service=api-scheduler
      - traefik.http.services.api-scheduler.loadbalancer.server.port=8080

  api-trigger:
    image: python:3.10.6-slim-bullseye
    container_name: api-trigger
    hostname: api-trigger
    volumes:
      - ./services/api-trigger:/usr/src/app
    environment:
      DB_HOSTNAME: mongodb
      DB_PORT: 27017
      DB_USERNAME: root
      DB_PASSWORD: 123456
      DB_NAME: myiot
      TZ: Asia/Makassar
    networks:
      - services-db
      - services-proxy
    working_dir: /usr/src/app
    command: /bin/bash -c "pip3 install -r requirements.txt && python app.py"
    labels:
      - traefik.enable=true
      - traefik.http.middlewares.api-trigger.stripprefix.forceslash=false
      - traefik.http.middlewares.api-trigger.stripprefix.prefixes=/trigger/,/trigger
      - traefik.http.routers.api-trigger.entrypoints=web
      - traefik.http.routers.api-trigger.middlewares=api-trigger
      - traefik.http.routers.api-trigger.rule=(Host(`api.myiot.com`) && (PathPrefix(`/trigger/`) || PathPrefix(`/trigger`)))
      - traefik.http.routers.api-trigger.service=api-trigger
      - traefik.http.services.api-trigger.loadbalancer.server.port=8080

  # ===============
  # Scheduler
  # ===============
  scheduler:
    image: python:3.10.6-slim-bullseye
    container_name: scheduler
    hostname: scheduler
    restart: always
    volumes:
      - ./services/scheduler:/usr/src/app
    working_dir: /usr/src/app
    command: /bin/bash -c "pip3 install -r requirements.txt && python app.py"
    environment:
      TZ: Asia/Makassar
    networks:
      - services-db
      - services-proxy

  trigger:
    image: python:3.10.6-slim-bullseye
    container_name: trigger
    hostname: trigger
    restart: always
    volumes:
      - ./services/trigger:/usr/src/app
    working_dir: /usr/src/app
    command: /bin/bash -c "pip3 install -r requirements.txt && python app.py"
    environment:
      TZ: Asia/Makassar
    networks:
      - services-db
      - services-proxy

networks:
  services-proxy:
  services-db:


volumes:
  portainer_data:
