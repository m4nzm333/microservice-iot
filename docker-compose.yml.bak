version: "3.3"

services:
  # ===============
  # Proxy
  # ===============
  traefik:
    container_name: traefik
    image: "traefik:latest"
    command:
      - --api
      - --certificatesresolvers.leresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.leresolver.acme.email=mr.unlistedi@gmail.com #Set your email address here, is for the generation of SSL certificates with Let's Encrypt. 
      - --certificatesresolvers.leresolver.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.leresolver.acme.httpchallenge=true
      - --certificatesresolvers.leresolver.acme.storage=./acme.json
      - --certificatesresolvers.leresolver.acme.tlschallenge=true
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --log.level=ERROR
      - --providers.docker
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./traefik/acme.json:/acme.json"
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik.entrypoints=websecure
      - traefik.http.routers.traefik.rule=Host(`traefik.myiot.com`)
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.routers.traefik.tls.certresolver=leresolver
      - traefik.http.routers.traefik.tls=true
      # Redirect HTTP -> HTTPS
      - traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)
      - traefik.http.routers.http-catchall.entrypoints=web
      - traefik.http.routers.http-catchall.middlewares=redirect-to-https
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
    networks:
      - services-proxy
      - services-db

  # ===============
  # Container Manager
  # ===============
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    command: -H unix:///var/run/docker.sock
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./portainer/data:/data
    labels:
      - traefik.enable=true
      - traefik.http.routers.portainer.entrypoints=websecure
      - traefik.http.routers.portainer.rule=Host(`portainer.myiot.com`)
      - traefik.http.routers.portainer.service=portainer
      - traefik.http.routers.portainer.tls.certresolver=leresolver
      - traefik.http.routers.portainer.tls=true
      - traefik.http.services.portainer.loadbalancer.server.port=9000
    networks:
      - services-proxy

  # ===============
  # Database
  # ===============
  db-asap:
    image: mongo
    container_name: db-asap
    hostname: db-asap
    volumes:
      - ./db-asap:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: 123456
    networks:
      - services-db

  db-cahaya:
    image: mongo
    container_name: db-cahaya
    hostname: db-cahaya
    volumes:
      - ./db-cahaya:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: 123456
    networks:
      - services-db

  db-gerak:
    image: mongo
    container_name: db-gerak
    hostname: db-gerak
    volumes:
      - ./db-gerak:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: 123456
    networks:
      - services-db

  db-suhukelembapan:
    image: mongo
    container_name: db-suhukelembapan
    hostname: db-suhukelembapan
    volumes:
      - ./db-suhukelembapan:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: 123456
    networks:
      - services-db

  # ===============
  # Adminer
  # ===============
  # adminer:
  #   image: adminer
  #   container_name: adminer
  #   hostname: adminer
  #   networks:
  #     - services-db
  #     - services-proxy
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.adminer.entrypoints=websecure
  #     - traefik.http.routers.adminer.rule=Host(`adminer.myiot.com`)
  #     - traefik.http.routers.adminer.service=adminer
  #     - traefik.http.routers.adminer.tls.certresolver=leresolver
  #     - traefik.http.routers.adminer.tls=true
  #     - traefik.http.services.adminer.loadbalancer.server.port=8080

  # ===============
  # DB Manager
  # ===============
  manager-asap:
    #port:8081
    image: mongo-express
    container_name: manager-asap
    hostname: manager-asap
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: 123456
      ME_CONFIG_MONGODB_URL: mongodb://root:123456@db-asap:27017/
    networks:
      - services-db
      - services-proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.manager-asap.entrypoints=websecure
      - traefik.http.routers.manager-asap.rule=Host(`dbasap.myiot.com`)
      - traefik.http.routers.manager-asap.service=manager-asap
      - traefik.http.routers.manager-asap.tls.certresolver=leresolver
      - traefik.http.routers.manager-asap.tls=true
      - traefik.http.services.manager-asap.loadbalancer.server.port=8081
    depends_on:
      - db-asap

  manager-cahaya:
    #port:8081
    image: mongo-express
    container_name: manager-cahaya
    hostname: manager-cahaya
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: 123456
      ME_CONFIG_MONGODB_URL: mongodb://root:123456@db-cahaya:27017/
    networks:
      - services-db
      - services-proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.manager-cahaya.entrypoints=websecure
      - traefik.http.routers.manager-cahaya.rule=Host(`dbcahaya.myiot.com`)
      - traefik.http.routers.manager-cahaya.service=manager-cahaya
      - traefik.http.routers.manager-cahaya.tls.certresolver=leresolver
      - traefik.http.routers.manager-cahaya.tls=true
      - traefik.http.services.manager-cahaya.loadbalancer.server.port=8081
    depends_on:
      - db-cahaya

  manager-gerak:
    #port:8081
    image: mongo-express
    container_name: manager-gerak
    hostname: manager-gerak
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: 123456
      ME_CONFIG_MONGODB_URL: mongodb://root:123456@db-gerak:27017/
    networks:
      - services-db
      - services-proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.manager-gerak.entrypoints=websecure
      - traefik.http.routers.manager-gerak.rule=Host(`dbgerak.myiot.com`)
      - traefik.http.routers.manager-gerak.service=manager-gerak
      - traefik.http.routers.manager-gerak.tls.certresolver=leresolver
      - traefik.http.routers.manager-gerak.tls=true
      - traefik.http.services.manager-gerak.loadbalancer.server.port=8081
    depends_on:
      - db-gerak

  manager-suhukelembapan:
    #port:8081
    image: mongo-express
    container_name: manager-suhukelembapan
    hostname: manager-suhukelembapan
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: 123456
      ME_CONFIG_MONGODB_URL: mongodb://root:123456@db-suhukelembapan:27017/
    networks:
      - services-db
      - services-proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.manager-suhukelembapan.entrypoints=websecure
      - traefik.http.routers.manager-suhukelembapan.rule=Host(`dbsuhukelembapan.myiot.com`)
      - traefik.http.routers.manager-suhukelembapan.service=manager-suhukelembapan
      - traefik.http.routers.manager-suhukelembapan.tls.certresolver=leresolver
      - traefik.http.routers.manager-suhukelembapan.tls=true
      - traefik.http.services.manager-suhukelembapan.loadbalancer.server.port=8081
    depends_on:
      - db-suhukelembapan

  # ===============
  # DB Tester
  # ===============
  whoami:
    image: traefik/whoami
    container_name: whoami
    labels:
      - traefik.enable=true
      - traefik.http.routers.whoami.entrypoints=websecure
      - traefik.http.routers.whoami.rule=((Host(`myiot.com`) && Path(`/whoami`)) || Host(`myiot.com`))
      - traefik.http.routers.whoami.service=whoami
      - traefik.http.routers.whoami.tls.certresolver=leresolver
      - traefik.http.routers.whoami.tls=true
      - traefik.http.services.whoami.loadbalancer.server.port=80
    networks:
      - services-proxy

networks:
  services-proxy:
  services-db:


volumes:
  portainer_data:
